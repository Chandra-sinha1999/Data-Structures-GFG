#include<iostream>
#include<algorithm>
using namespace std;
void reverseal(int *a,int i,int j)
{
    for(int k=0;(i+k)<=((i+j)/2);k++)
    {
        swap(a[i+k],a[j-k]);
    }
}
void leftbyone(int *a,int n)
{
    int temp=a[0];
    for(int i=0;i<n-1;i++)
    {
        a[i]=a[i+1];
    }
    a[n-1]=temp;
}
void leftrotate(int *a,int n,int d)
{
    for(int i=0;i<d;i++)
        leftbyone(a,n);
}
int main(void)
{
    int n;
    n=5;
    int a[n]={1,2,3,4,5};
    int d;
    cin>>d;
    //rotation of array from any element using a temporary space
    /*int arr[d];
    for(int i=0;i<d;i++)
    {
        arr[i]=a[i];
    }
    for(int i=0;i<n-d;i++)
    {
        a[i]=a[i+d];
    }
    int j=0;
    for(int i=n-d;i<n;i++)
    {
        a[i]=arr[j];
        j++;
    }
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
    //time complexity for above was o(n) &extra space required was O(d)*/


    //left rotation by one method
    /*leftrotate(a,n,d);
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";*/
    //time complexity was o(n*D) but space was only o(1)

    //juggling method....Here we find the GCD of both n and D and left rotate the elements by a space of G


    //Reversal Algorithm
    //we will reverse upto d elements,then reverse from d to n and finally reverse whole array
    reverseal(a,0,d-1);
    reverseal(a,d,n-1);
    reverseal(a,0,n-1);
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
    //time complexity is o(n)
}

